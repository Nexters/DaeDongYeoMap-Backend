# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""카카오 지도 api로 부터 받은 위치 정보로 TTL 300 캐싱됩니다."""
type Place {
  """kakao place id"""
  id: String!
  place_name: String!
  category_name: String
  category_group_code: String
  category_group_name: String
  phone: String
  address_name: String
  road_address_name: String
  place_url: String
  distance: String
  x: Float
  y: Float
}

"""'이모지 스티커'로 코스 생성에 기본적으로 사용되는 단위입니다."""
type Sticker {
  """Sticker id"""
  _id: String!

  """Sticker category로 스티커 이름정도 주면 적당할 듯"""
  sticker_category: String!

  """Sticker가 코스 생성에 사용여부"""
  is_used: Boolean!

  """스티커가 붙여진 Spot id 또는 Spot 객체값"""
  spot(populate: Boolean!): Spot!
}

"""Emoji를 포함한 유저데이터를 포함하여, mongodb에 저장시킬 장소 데이터"""
type Spot {
  """Spot id"""
  _id: String!

  """kakao place id"""
  place_id: String!

  """list of sticker ids"""
  stickers(populate: Boolean!): [Sticker!]!
  place_name: String!
  category_name: String
  category_group_code: String
  category_group_name: String
  phone: String
  address_name: String
  road_address_name: String
  place_url: String
  distance: String
  x: Float
  y: Float
}

type DeleteSpotDto {
  ok: Int!
  n: Int!
  deletedCount: Int!
}

"""스티커(스팟)을 순서대로 저장하고 있는 데이터 코스 정보"""
type Course {
  """Course id"""
  _id: String!

  """list of sticker ids(순서 중요)"""
  stickers: [Sticker!]!
  title: String!

  """list of sticker ids(순서 중요)"""
  is_share: Boolean!
}

type Query {
  """
  키워드로 위치 정보를 확인합니다. 
  내부적으로 카카오 API를 요청합니다.
  """
  getPlacesByKeyword(filters: KeywordSearchDto!): [Place!]!
  getPlaceFromCache(place_id: String!): Place!

  """(For Debugging) mongoDB에 저장된 모든 스팟 반환"""
  getAllSpots: [Spot!]!

  """검색 키워드와 매칭되는 스팟들을 반환"""
  getSpotsByKeyword(keyword: String!): [Spot!]!

  """(For Debugging) 카카오 place id로 스팟 검색"""
  spot(place_id: String!): Spot!
  stickers: [Sticker!]!
  sticker(id: String!): Sticker!
}

"""SortType은 정확도(accuracy)가 기본이며, 거리순(distance) 정렬을 원할 경우 x,y는 필수 입니다."""
input KeywordSearchDto {
  query: String!
  category_group_code: String
  x: Float
  y: Float
  radius: Int
  rect: String
  page: Int
  size: Int
  sort: SortType
}

enum SortType {
  distance
  accuracy
}

type Mutation {
  """(For Debugging) 스팟 하나 삭제"""
  removeSpot(id: String!): DeleteSpotDto!
  createSticker(createStickerInput: CreateStickerInput!): Sticker!
  updateSticker(updateStickerInput: UpdateStickerInput!): Sticker!

  """Sticker를 사용하여 코스를 생성합니다. 이때 코스의 순서는 전달된 스티커들의 순서로 처리됩니다."""
  createCourse(createCourseInput: CreateCourseInput!): Course!
}

input CreateStickerInput {
  """카카오 Place id"""
  place_id: String!
  place_name: String!
  x: Float!
  y: Float!
  category_name: String
  category_group_code: String
  category_group_name: String
  phone: String
  address_name: String
  road_address_name: String
  place_url: String
  distance: String

  """Sticker category로 스티커 이름정도 주면 적당할 듯"""
  sticker_category: String!

  """Sticker가 코스 생성에 사용여부"""
  is_used: Boolean
}

input UpdateStickerInput {
  """Sticker id"""
  _id: String!

  """Sticker가 코스 생성에 사용여부"""
  is_used: Boolean
}

input CreateCourseInput {
  """list of sticker ids(순서 중요)"""
  stickers: [String!]!
  title: String!
  isPrivate: String!
}
